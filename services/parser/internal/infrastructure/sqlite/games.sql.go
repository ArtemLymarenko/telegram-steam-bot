// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: games.sql

package repository

import (
	"context"
	"database/sql"
)

const addUserGame = `-- name: addUserGame :exec
INSERT INTO users_games(user_id, game_id) VALUES (?, ?)
`

type addUserGameParams struct {
	UserID int64
	GameID int64
}

func (q *Queries) addUserGame(ctx context.Context, arg addUserGameParams) error {
	_, err := q.db.ExecContext(ctx, addUserGame, arg.UserID, arg.GameID)
	return err
}

const createGame = `-- name: createGame :exec
INSERT INTO games(id, name) VALUES (?, ?)
`

type createGameParams struct {
	ID   int64
	Name string
}

func (q *Queries) createGame(ctx context.Context, arg createGameParams) error {
	_, err := q.db.ExecContext(ctx, createGame, arg.ID, arg.Name)
	return err
}

const createGameInfo = `-- name: createGameInfo :exec
INSERT INTO game_info(game_id, url, image_url, initial_price, final_price, discount_percent) VALUES (?, ?, ?, ?, ?, ?)
`

type createGameInfoParams struct {
	GameID          int64
	Url             sql.NullString
	ImageUrl        sql.NullString
	InitialPrice    sql.NullFloat64
	FinalPrice      sql.NullFloat64
	DiscountPercent sql.NullFloat64
}

func (q *Queries) createGameInfo(ctx context.Context, arg createGameInfoParams) error {
	_, err := q.db.ExecContext(ctx, createGameInfo,
		arg.GameID,
		arg.Url,
		arg.ImageUrl,
		arg.InitialPrice,
		arg.FinalPrice,
		arg.DiscountPercent,
	)
	return err
}

const deleteGameById = `-- name: deleteGameById :exec
DELETE FROM games WHERE id = ?
`

func (q *Queries) deleteGameById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGameById, id)
	return err
}

const findGame = `-- name: findGame :one
SELECT g.id, g.name, gi.game_id, gi.url, gi.image_url, gi.initial_price, gi.final_price, gi.discount_percent  FROM games as g
    LEFT JOIN game_info as gi
    ON g.id = gi.game_id
    WHERE g.id = ? LIMIT 1
`

type findGameRow struct {
	Game     Game
	GameInfo GameInfo
}

func (q *Queries) findGame(ctx context.Context, id int64) (findGameRow, error) {
	row := q.db.QueryRowContext(ctx, findGame, id)
	var i findGameRow
	err := row.Scan(
		&i.Game.ID,
		&i.Game.Name,
		&i.GameInfo.GameID,
		&i.GameInfo.Url,
		&i.GameInfo.ImageUrl,
		&i.GameInfo.InitialPrice,
		&i.GameInfo.FinalPrice,
		&i.GameInfo.DiscountPercent,
	)
	return i, err
}

const findUserGames = `-- name: findUserGames :many
SELECT g.id, g.name, gi.game_id, gi.url, gi.image_url, gi.initial_price, gi.final_price, gi.discount_percent
FROM users_games AS ug
JOIN games AS g ON ug.game_id = g.id
LEFT JOIN game_info AS gi ON g.id = gi.game_id
WHERE ug.user_id = ?
`

type findUserGamesRow struct {
	Game     Game
	GameInfo GameInfo
}

func (q *Queries) findUserGames(ctx context.Context, userID int64) ([]findUserGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserGames, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []findUserGamesRow
	for rows.Next() {
		var i findUserGamesRow
		if err := rows.Scan(
			&i.Game.ID,
			&i.Game.Name,
			&i.GameInfo.GameID,
			&i.GameInfo.Url,
			&i.GameInfo.ImageUrl,
			&i.GameInfo.InitialPrice,
			&i.GameInfo.FinalPrice,
			&i.GameInfo.DiscountPercent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGamesByName = `-- name: searchGamesByName :many
SELECT g.id, g.name, gi.game_id, gi.url, gi.image_url, gi.initial_price, gi.final_price, gi.discount_percent
FROM games_fts AS fts
JOIN games AS g ON fts.rowid = g.id
LEFT JOIN game_info AS gi ON g.id = gi.game_id
WHERE fts.name  MATCH ?
`

type searchGamesByNameRow struct {
	Game     Game
	GameInfo GameInfo
}

func (q *Queries) searchGamesByName(ctx context.Context, name string) ([]searchGamesByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, searchGamesByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []searchGamesByNameRow
	for rows.Next() {
		var i searchGamesByNameRow
		if err := rows.Scan(
			&i.Game.ID,
			&i.Game.Name,
			&i.GameInfo.GameID,
			&i.GameInfo.Url,
			&i.GameInfo.ImageUrl,
			&i.GameInfo.InitialPrice,
			&i.GameInfo.FinalPrice,
			&i.GameInfo.DiscountPercent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
