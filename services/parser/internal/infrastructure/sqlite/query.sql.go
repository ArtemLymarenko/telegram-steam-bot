// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlite

import (
	"context"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games(id, name) VALUES (?, ?) RETURNING id, name
`

type CreateGameParams struct {
	ID   int64
	Name string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame, arg.ID, arg.Name)
	var i Game
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findGame = `-- name: FindGame :one
SELECT g.id, g.name FROM games as g WHERE g.id = ? LIMIT 1
`

func (q *Queries) FindGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, findGame, id)
	var i Game
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
